{"version":"1","records":[{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook"},"content":"","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook"},"type":"lvl1","url":"/#web-map-feature-services-cookbook","position":2},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook"},"content":"\n\n\n\n\n\n\n\nThis Project Pythia Cookbook covers retrieving and using web map / feature services to help provide the necessary spatial context to your data.\n\nNow using MyST!","type":"content","url":"/#web-map-feature-services-cookbook","position":3},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl2":"Motivation"},"type":"lvl2","url":"/#motivation","position":4},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl2":"Motivation"},"content":"By leveraging web map / feature services, users can easily access pre-processed data layers, utilize ready-to-use tiles, and benefit from production-level data that is continuously updated. This streamlines the data acquisition process and enables users to focus on their analysis tasks rather than data processing.\n\nPre-processed Data: Web map services provide access to a wide range of pre-processed geospatial data layers. This eliminates the need for users to perform data processing tasks themselves, saving time and effort.\n\nReady-to-Use Tiles: Users can simply fetch the tiles from the web map services and use them as a reference or overlay in their analysis. This makes it convenient to integrate the data into their own applications without the need to handle complex data processing workflows.\n\nProduction-Level Data: Web map services are often deployed at production level, ensuring that the data is up-to-date and near real-time. This is particularly advantageous for applications that require the latest information, such as weather monitoring or real-time asset tracking.","type":"content","url":"/#motivation","position":5},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":6},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl2":"Authors"},"content":"Andrew Huang","type":"content","url":"/#authors","position":7},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":8},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":9},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":10},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl2":"Structure"},"content":"This cookbook is broken up into two main sections - “Foundations” and “Example Workflows.”","type":"content","url":"/#structure","position":11},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Foundations","lvl2":"Structure"},"type":"lvl3","url":"/#foundations","position":12},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Foundations","lvl2":"Structure"},"content":"The foundational content includes:\n\nWeb Map Services\n\nWeb Feature Services","type":"content","url":"/#foundations","position":13},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Example Workflows","lvl2":"Structure"},"type":"lvl3","url":"/#example-workflows","position":14},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Example Workflows","lvl2":"Structure"},"content":"Example workflows include:\n\nNASA Earthdata GIBS Explorer","type":"content","url":"/#example-workflows","position":15},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Running on Binder","lvl2":"Structure"},"type":"lvl3","url":"/#running-on-binder","position":16},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Running on Binder","lvl2":"Structure"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.","type":"content","url":"/#running-on-binder","position":17},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Structure"},"type":"lvl3","url":"/#running-on-your-own-machine","position":18},{"hierarchy":{"lvl1":"Web Map / Feature Services Cookbook","lvl3":"Running on Your Own Machine","lvl2":"Structure"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\n(Replace “cookbook-example” with the title of your cookbooks)\n\nClone the https://github.com/ProjectPythia/web-map-feature-services-cookbook repository: git clone https://github.com/ProjectPythia/web-map-feature-services-cookbook.git\n\nMove into the web-map-feature-services-cookbook directorycd web-map-feature-services-cookbook\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate web-map-feature-services-cookbook-dev\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":19},{"hierarchy":{"lvl1":"Introduction"},"type":"lvl1","url":"/notebooks/introduction","position":0},{"hierarchy":{"lvl1":"Introduction"},"content":"Web map and feature services (WMS and WFS) are powerful tools that revolutionize the way we interact with geospatial data.\n\nThese services provide users with seamless access to a vast array of geospatial information, ranging from basemaps and satellite imagery to weather data and demographic information.\n\nWith web map and feature services, users can easily integrate geospatial data into their applications, visualize data in a geographic context, and perform complex spatial analysis tasks.\n\nThese services eliminate the need for users to store and process massive datasets locally, as the data is hosted and maintained by the service providers.\n\nNotable examples include Google Maps as a WMS, offering basemaps, satellite imagery, and real-time traffic information, and GeoServer as an open-source WFS for sharing and analyzing vector geospatial data.\n\nBy leveraging web map and feature services, users can unlock the full potential of geospatial data, gaining insights and making informed decisions based on the spatial relationships and patterns present in the data.","type":"content","url":"/notebooks/introduction","position":1},{"hierarchy":{"lvl1":"Introduction","lvl2":"Types of Maps and Features"},"type":"lvl2","url":"/notebooks/introduction#types-of-maps-and-features","position":2},{"hierarchy":{"lvl1":"Introduction","lvl2":"Types of Maps and Features"},"content":"Here are some common types of maps and features that can be accessed through web map services (WMS) and web feature services (WFS):\n\nStreet: Visual representation of roads, streets, and urban infrastructure.\n\nTopographic: Displays terrain features, contour lines, elevation, and landforms.\n\nSatellite Imagery: Uses aerial or satellite imagery for a realistic view of the Earth’s surface.\n\nWeather: Shows real-time or forecasted weather conditions and meteorological data.\n\nHydrographic: Emphasizes water-related features like rivers, lakes, coastlines, and oceans.\n\nFire: Fire basemaps focus on monitoring and visualizing fire incidents, fire risk areas, and fire behavior.\n\nRadar: Incorporates radar data to visualize weather phenomena such as precipitation intensity and storms.\n\nTransportation: Focuses on transportation infrastructure like roads, highways, railways, airports, and transit routes.\n\nHydrographic: Highlights water-related features such as rivers, lakes, coastlines, and oceans.\n\nGeological: Displays geological formations, rock types, and geological features.\n\nSeismic: Focuses on seismic activity, fault lines, and earthquake-prone areas.\n\nSoil and Agriculture: Depicts soil types, fertility, crop distribution, and agricultural practices.\n\nLand Use and Land Cover: Showcases land use classification and distribution, including urban areas, forests, agricultural lands, and water bodies.\n\nEcological: Highlights ecosystems, biodiversity hotspots, protected areas, and ecological features.","type":"content","url":"/notebooks/introduction#types-of-maps-and-features","position":3},{"hierarchy":{"lvl1":"Introduction","lvl2":"Service Providers"},"type":"lvl2","url":"/notebooks/introduction#service-providers","position":4},{"hierarchy":{"lvl1":"Introduction","lvl2":"Service Providers"},"content":"Google Maps: Google Maps offers web map services with a wide range of basemaps, satellite imagery, and real-time traffic information. It is a popular choice for various applications, including navigation, location-based services, and spatial analysis.\n\nOpenStreetMap: OpenStreetMap is an open-source web map service that provides free and editable map data contributed by users worldwide. It offers basemaps, street-level details, and various overlays, making it a versatile choice for mapping applications.\n\nNASA Earth Observing System Data and Information System (EOSDIS): NASA EOSDIS provides web map services that offer access to Earth observation data, satellite imagery, and environmental datasets. These services support scientific research, climate monitoring, and natural resource management.\n\nNational Oceanic and Atmospheric Administration (NOAA): NOAA provides web map services that focus on weather, climate, and oceanographic data. These services offer real-time and historical weather information, storm tracking, oceanic conditions, and marine data for applications such as weather forecasting, environmental monitoring, and marine navigation.\n\nUnited States Geological Survey (USGS): USGS offers web map services that provide access to a wide range of geospatial data, including topographic maps, satellite imagery, geologic maps, and elevation data. These services support geological research, land management, and hazard assessment.\n\nEuropean Space Agency (ESA): ESA offers web map services that provide access to satellite imagery and Earth observation data. These services enable users to monitor environmental changes, study land cover and land use, and analyze various geospatial phenomena.\n\nBritish Geological Survey (BGS): BGS provides web map services that offer geological data, including geological maps, borehole information, and geophysical data. These services support geological research, exploration, and hazard assessment.\n\nCGIAR-CSI (Consultative Group for International Agricultural Research - Consortium for Spatial Information): CGIAR-CSI offers web map services that provide access to geospatial data related to agriculture, including land suitability maps, climate data, and crop distribution information. These services support agricultural research, food security analysis, and sustainable land management.","type":"content","url":"/notebooks/introduction#service-providers","position":5},{"hierarchy":{"lvl1":"Introduction","lvl2":"WMS vs WFS"},"type":"lvl2","url":"/notebooks/introduction#wms-vs-wfs","position":6},{"hierarchy":{"lvl1":"Introduction","lvl2":"WMS vs WFS"},"content":"Web map services (WMS) primarily focus on serving map imagery or basemaps. They provide pre-rendered map images in the form of tiles that can be displayed and layered on top of each other to form a complete map. These basemaps typically include features like roads, buildings, and landmarks, and are often used for visual reference and navigation.\n\nOn the other hand, web feature services (WFS) are designed to serve geospatial feature data rather than map imagery. They provide access to individual geographic features such as points, lines, and polygons, along with their associated attributes and geometry information. Web feature services allow users to query, retrieve, and interact with these features, making them suitable for applications that require more detailed spatial analysis or data manipulation.\n\n\n\n","type":"content","url":"/notebooks/introduction#wms-vs-wfs","position":7},{"hierarchy":{"lvl1":"Introduction","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/introduction#summary","position":8},{"hierarchy":{"lvl1":"Introduction","lvl2":"Summary"},"content":"Web map and feature services (WMS / WFS) revolutionize geospatial data interaction. These services grant users seamless access to diverse geospatial information, from basemaps and satellite imagery to weather data and demographics. Users can integrate geospatial data into their applications, visualize it geographically, and perform complex spatial analysis tasks.\n\nWith web map and feature services, there’s no need for users to locally store and process massive datasets. The data is hosted and maintained by service providers. Notable examples include Google Maps as a WMS, offering basemaps, satellite imagery, and real-time traffic information. GeoServer is an open-source WFS for sharing and analyzing vector geospatial data.\n\nUsers unlock the full potential of geospatial data by leveraging web map and feature services. They gain insights and make informed decisions based on spatial relationships and patterns in the data\n\nIn the next couple sections we’ll learn about how to use web map and feature services with GeoViews, Matplotlib, and CartoPy.\n\n","type":"content","url":"/notebooks/introduction#summary","position":9},{"hierarchy":{"lvl1":"Introduction","lvl2":"Resources and references"},"type":"lvl2","url":"/notebooks/introduction#resources-and-references","position":10},{"hierarchy":{"lvl1":"Introduction","lvl2":"Resources and references"},"content":"NOAA Cloud GIS Web Services\n\nUSGS National Map Services\n\nNASA EarthData Web Map Service","type":"content","url":"/notebooks/introduction#resources-and-references","position":11},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer"},"type":"lvl1","url":"/notebooks/nasa-earthdata-gibs-explorer","position":0},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer"},"content":"\n\nImage from \n\nNASA Global Imagery Browse Services (GIBS) GitHub\n\n","type":"content","url":"/notebooks/nasa-earthdata-gibs-explorer","position":1},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer"},"type":"lvl1","url":"/notebooks/nasa-earthdata-gibs-explorer#nasa-earthdata-gibs-explorer","position":2},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer"},"content":"Global Imagery Browse Services (GIBS) provides quick access to over 1,000 satellite imagery products, covering every part of the world. Most imagery is updated daily—available within a few hours after satellite observation, and some products span almost 30 years.\n\nBelow demos how to use OWSLib, Geoviews, HoloViews, and Panel effectively to create our own GIBS explorer.","type":"content","url":"/notebooks/nasa-earthdata-gibs-explorer#nasa-earthdata-gibs-explorer","position":3},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/nasa-earthdata-gibs-explorer#prerequisites","position":4},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer","lvl2":"Prerequisites"},"content":"The following packages are good to know, but not required.\n\nConcepts\n\nImportance\n\nNotes\n\nIntro to GeoViews\n\nHelpful\n\nGeographic visualizations\n\nIntro to Panel\n\nHelpful\n\nDashboard creations\n\nIntro to OWSLib\n\nHelpful\n\nWMS URLs\n\nTime to learn: 15 minutes\n\n","type":"content","url":"/notebooks/nasa-earthdata-gibs-explorer#prerequisites","position":5},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/nasa-earthdata-gibs-explorer#imports","position":6},{"hierarchy":{"lvl1":"NASA Earthdata GIBS Explorer","lvl2":"Imports"},"content":"Let’s first import a few packages.\n\nHoloViews and GeoViews is a Python library that facilitates the integration of WMS and other geospatial data sources with your own datasets. It provides a high-level interface for working with geographic data and simplifies the process of creating interactive visualizations.\n\nPandas is a powerful Python library for data manipulation and analysis. It offers versatile data structures, such as Series and DataFrame, for working with structured data. However, here, we will only be using it to generate date time ranges.\n\nPanel is a Python library that offers a set of flexible and powerful tools for creating interactive dashboards and apps. It allows you to build custom user interfaces with interactive controls, widgets, and layout components, enabling rich interactivity for your visualizations and data analysis workflows.\n\nOWSLib is a Python library designed for client-side programming using the interface standards of the Open Geospatial Consortium (OGC) web services and their associated content models. Specifically, in this scenario, OWSLib will be utilized solely for the purpose of constructing URLs for WMS.\n\nThe next line, hv.extension(\"bokeh\"), enables the Bokeh (interactive) plotting backend for GeoViews. GeoViews supports multiple plotting backends, such as Bokeh and Matplotlib, which allow you to choose the one that best suits your needs.\n\nFinally, pn.extension() initializes the panel library and sets up the necessary environment for creating interactive panels and dashboards. You may specify configurations like sizing_mode=\"stretch_width\" within pn.extension().\n\nimport panel as pn\nimport pandas as pd\nimport holoviews as hv\nimport geoviews as gv\nfrom owslib.wms import WebMapService\n\nhv.extension(\"bokeh\")\npn.extension(sizing_mode=\"stretch_width\")\n\n","type":"content","url":"/notebooks/nasa-earthdata-gibs-explorer#imports","position":7},{"hierarchy":{"lvl1":"Accessing GIBS"},"type":"lvl1","url":"/notebooks/nasa-earthdata-gibs-explorer#accessing-gibs","position":8},{"hierarchy":{"lvl1":"Accessing GIBS"},"content":"Accessing NASA’s GIBS (Global Imagery Browse Services) is well-documented, and you can find the documentation \n\nhere.\n\nTo access GIBS through the WMS (Web Map Service) endpoints, you can follow these steps:\n\nFind the WMS service endpoints by referring to the \n\nservice endpoints section of the documentation. Look for the row that corresponds to the EPSG:3857 projection, as GeoViews currently supports that projection for tile services.\n\nOnce you have identified the WMS service endpoint, copy one of the versions’ \n\nGetCapabilities URLs. This URL provides information about the available layers and operations supported by the WMS service.\n\nPass the GetCapabilities URL to the WebMapService class, which is a part of the OWSLib library. This class allows you to interact with the WMS service and retrieve the desired data.\n\nBy following these steps, you will be able to access and work with the NASA GIBS data using the WMS service endpoints.\n\nbase_resource_url = \"https://gibs.earthdata.nasa.gov/wms/epsg3857/best/wms.cgi?SERVICE=WMS&REQUEST=GetCapabilities&VERSION=1.3.0\"\n\nwms = WebMapService(base_resource_url)\n\nIf we examine the contents, we can see that there are over a 1,000 layers (products) available!\n\nwms_contents = pd.Series(wms.contents)\nprint(len(wms_contents))\nwms_contents.index\n\nWith a myriad of captivating options within your reach, why not embark on a journey of exploration and create your own interactive explorer?\n\nNow, you might be wondering, since there already exists an online explorer called \n\nWorldView, why bother reinventing the wheel? Well, here’s the catch: by building your own explorer, you have the freedom to incorporate your own datasets into the mix!\n\nNot only does this provide a unique opportunity to personalize your exploration experience, but it’s also a fantastic way to explore all the exciting options available while showcasing the incredible power of Python packages working in harmony!\n\nThe rendered output does not have a backend server supporting it, and will not update on change. Instead, try it out interactively a slightly modified version (with a template) \n\nhere!\n\nBASE_URL = \"https://gibs.earthdata.nasa.gov/wms/epsg3857/best/wms.cgi?SERVICE=WMS\"\nXMIN = -20037507.539400\nYMIN = 1638517.444800\nXMAX = 20037260.918700\nYMAX = 7714669.39460\n\n\nclass NasaEarthDataGibsWmsExplorer:\n    def __init__(self):\n        self.wms = WebMapService(BASE_URL)\n        layers = sorted(self.wms.contents)\n        self.products_layers = {\"Miscellaneous\": []}\n        for layer in layers:\n            if \"_\" in layer:\n                product, product_layer = layer.split(\"_\", 1)\n                if product not in self.products_layers:\n                    self.products_layers[product] = []\n                self.products_layers[product].append(product_layer)\n            else:\n                self.products_layers[\"Miscellaneous\"].append(layer)\n\n        # create widgets\n        self.product_select = pn.widgets.Select(\n            name=\"Product\",\n            options=sorted(self.products_layers),\n        )\n        self.layer_select = pn.widgets.Select(\n            name=\"Layer\",\n            options=sorted(self.products_layers[self.product_select.value]),\n        )\n        self.time_slider = pn.widgets.DiscreteSlider(name=\"Time\", margin=(5, 16))\n        self.refresh_button = pn.widgets.Button(name=\"Refresh\", button_type=\"light\")\n        self.image_pane = pn.pane.Image()  # for colorbar / legend\n        self.holoviews_pane = pn.pane.HoloViews(min_height=500, sizing_mode=\"stretch_both\")\n        pn.state.onload(self._onload)\n    \n    def _onload(self):\n        # add interactivity; we use watch because the function does not return anything\n        pn.bind(self.update_layers, self.product_select, watch=True)\n        pn.bind(self.update_time, self.layer_select, watch=True)\n        pn.bind(self.refresh_layer, self.refresh_button, watch=True)\n\n        # create imagery\n        base_map = hv.element.tiles.EsriImagery().opts(\n            xlim=(XMIN, XMAX), ylim=(YMIN, YMAX), responsive=True\n        )\n        self.dynamic_map = hv.DynamicMap(\n            self.update_web_map, streams=[self.time_slider.param.value_throttled]\n        )\n        self.holoviews_pane.object = base_map * self.dynamic_map\n\n    def refresh_layer(self, clicks=None):\n        self.time_slider.param.trigger(\"value_throttled\")\n\n    def get_layer(self, product=None, product_layer=None):\n        product = product or self.product_select.value\n        if product == \"Miscellaneous\":\n            layer = product_layer or self.layer_select.value\n        else:\n            layer = f\"{product}_{product_layer or self.layer_select.value}\"\n        return layer\n\n    def update_layers(self, product):\n        product_layers = self.products_layers[product]\n        self.layer_select.options = sorted(product_layers)\n\n    def update_time(self, product_layer):\n        layer = self.get_layer()\n        time_positions = self.wms.contents[layer].timepositions\n        if time_positions:\n            ini, end, step = time_positions[0].split(\"/\")\n            try:\n                freq = pd.Timedelta(step)\n            except ValueError:\n                freq = step.lstrip(\"P\")\n            options = (\n                pd.date_range(ini, end, freq=freq)\n                .strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n                .tolist()\n            )\n            if options:\n                value = options[0]\n                # value does not trigger; depends on value_throttled\n                self.time_slider.param.update(options=options, value=value)\n        else:\n            # use N/A instead of None to circumvent Panel from crashing\n            # when going from time-dependent layer to time-independent layer\n            self.time_slider.options = [\"N/A\"]\n        self.refresh_layer()\n\n    def get_url_template(self, layer, time=None):\n        get_map_kwargs = dict(\n            layers=[layer],\n            srs=\"EPSG:3857\",\n            bbox=(XMIN, YMIN, XMAX, YMAX),\n            size=(256, 256),\n            format=\"image/png\",\n            transparent=True,\n            time=time\n        )\n        try:\n            url = self.wms.getmap(**get_map_kwargs).geturl()\n        except Exception:\n            get_map_kwargs.pop(\"time\")\n            url = self.wms.getmap(**get_map_kwargs).geturl()\n        url_template = (\n            url.replace(str(XMIN), \"{XMIN}\")\n            .replace(str(YMIN), \"{YMIN}\")\n            .replace(str(XMAX), \"{XMAX}\")\n            .replace(str(YMAX), \"{YMAX}\")\n        )\n        return url_template\n\n    def update_web_map(self, value_throttled=None):\n        try:\n            self.holoviews_pane.loading = True\n            layer = self.get_layer()\n            time = self.time_slider.value\n            if time == \"N/A\":\n                time = None\n            url_template = self.get_url_template(layer, time)\n            layer_meta = self.wms[layer]\n            self.image_pane.object = layer_meta.styles.get(\"default\", {}).get(\"legend\")\n            layer_imagery = hv.Tiles(url_template).opts(title=layer_meta.title)\n        finally:\n            self.holoviews_pane.loading = False\n        return layer_imagery\n\n    def view(self):\n        widget_box = pn.WidgetBox(\n            self.product_select,\n            self.layer_select,\n            self.time_slider,\n            self.image_pane,\n            self.refresh_button,\n            pn.Spacer(sizing_mode=\"stretch_height\"),\n            sizing_mode=\"stretch_both\",\n            max_width=300,\n        )\n        return pn.Row(\n            widget_box,\n            self.holoviews_pane,\n            sizing_mode=\"stretch_both\",\n            min_height=500,\n        )\n\n\nexplorer = NasaEarthDataGibsWmsExplorer()\nexplorer.view().servable()\n\nThe provided code allows users to interactively explore various layers of NASA Earth Data imagery.\n\nThe NasaEarthDataWmsExplorer uses WebMapService from OWSLib ibrary to connect to the NASA Earth Data WMS service. The available layers are retrieved and displayed in a select widget.\n\nThe explorer provides interactivity through panel widgets such as the layer selection dropdown and the time slider.\n\nSelecting a layer updates the available time positions for that layer, while changing the time position updates the displayed imagery accordingly. Metadata from the layer is also extracted and displayed below the widgets.\n\nThe imagery is displayed using the GeoViews library, combined with a coastline feature.\n\n","type":"content","url":"/notebooks/nasa-earthdata-gibs-explorer#accessing-gibs","position":9},{"hierarchy":{"lvl1":"Accessing GIBS","lvl2":"Side-by-Side Comparisons"},"type":"lvl2","url":"/notebooks/nasa-earthdata-gibs-explorer#side-by-side-comparisons","position":10},{"hierarchy":{"lvl1":"Accessing GIBS","lvl2":"Side-by-Side Comparisons"},"content":"After some exploration, I discovered that GPW (Gridded Population of the World) product had four snapshots of population density, in 2000, 2005, 2010, 2020.\n\nWhat if we wanted a closer picture of what changed between 2000 and 2020?\n\nFirst, we can define a helper function, using the methods from the NasaEarthDataGibsWmsExplorer class.\n\ndef get_web_map(product, product_layer):\n    return (\n        gv.WMTS(\n            explorer.get_url_template(explorer.get_layer(product, product_layer))\n        ).opts(responsive=True, height=500, title=product_layer, global_extent=True)\n    )\n\nThen, we can layout the Population Density snapshots, side by side.\n\nWhen we zoom in on one, not only does the tiles are updated to show the new resolution, but the others’ zoom is also synced, so we can easily compare and contrast specific regions of interest.\n\npop_density_2000_map = get_web_map(\"GPW\", \"Population_Density_2000\")\npop_density_2020_map = get_web_map(\"GPW\", \"Population_Density_2020\")\n\npop_density_2000_map + pop_density_2020_map\n\nUpon zooming into specific regions, I realized that it’d be helpful to add borders, coastlines, and labels, so let’s update function.\n\ndef get_web_map(product, product_layer):\n    return (\n        gv.WMTS(\n            explorer.get_url_template(explorer.get_layer(product, product_layer))\n        ).opts(responsive=True, height=500, title=product_layer, global_extent=True) *\n        gv.feature.coastline() * gv.feature.borders() * gv.tile_sources.StamenLabels()\n    )\n    \npop_density_2000_map = get_web_map(\"GPW\", \"Population_Density_2000\")\npop_density_2020_map = get_web_map(\"GPW\", \"Population_Density_2020\")\n\npop_density_2000_map + pop_density_2020_map\n\nOne interesting thing I noticed was that in Egypt, there was a line of high population density. It’d would be interesting to see if it’s because of a water source.\n\npop_density_2000_map = get_web_map(\"GPW\", \"Population_Density_2000\")\nwater_bodies = get_web_map(\"Miscellaneous\", \"Water Bodies\")\nxlim = (2735065.540470079, 3886016.688009746)\nylim = (2442736.280432458, 3639157.2571363684)\n\npop_density_2000_map.opts(global_extent=False, xlim=xlim, ylim=ylim) + water_bodies\n\nDespite the limited visibility of the water body, it appears that areas with high population density in Egypt are associated with the presence of a river.\n\n","type":"content","url":"/notebooks/nasa-earthdata-gibs-explorer#side-by-side-comparisons","position":11},{"hierarchy":{"lvl1":"Accessing GIBS","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/nasa-earthdata-gibs-explorer#summary","position":12},{"hierarchy":{"lvl1":"Accessing GIBS","lvl2":"Summary"},"content":"While the standalone capabilities of this custom-built explorer may not rival those of the current WorldView explorer, its true power lies in its ability to incorporate personal data, combine various layers for analysis, and effectively communicate a narrative.\n\nWhat sets this explorer apart and makes it truly captivating and compelling is the seamless integration of personal data.\n\nHere are a few ideas to try:\n\nImplementing a search bar feature to easily navigate through the available layers.\n\nOverlaying satellite fire detection layers with other data sets, such as air quality measurements, to gain deeper insights.\n\nExamining the correlation between night lights and population density to uncover interesting patterns and trends.\n\nTracking changes in land types over the years to observe the evolving landscape.\n\nBy incorporating these ideas, the explorer can offer a more comprehensive and dynamic user experience.\n\nVisualizing climate data: Integrate climate data layers such as temperature, precipitation, or wind patterns to understand the relationship between climate and various geographical features.\n\nAnalyzing vegetation indices: Incorporate vegetation indices like NDVI (Normalized Difference Vegetation Index) to assess vegetation health and identify areas with dense vegetation or potential vegetation changes.\n\nMapping infrastructure and urban development: Overlay infrastructure data, such as roads, buildings, and urban areas, to analyze the impact of urbanization on the surrounding environment and land use patterns.\n\nExploring natural disasters: Incorporate real-time or historical data on natural disasters such as hurricanes, earthquakes, or floods, to study their impact on the affected regions and aid in disaster management and response efforts.\n\nMonitoring water resources: Utilize data on water bodies, water availability, and water quality to assess water resources, identify areas of concern, and track changes over time.\n\nInvestigating demographic patterns: Overlay demographic data, such as population density, age groups, or socioeconomic indicators, to study demographic patterns and their spatial relationships with other layers.\n\nTracking wildlife habitats: Integrate data on wildlife habitats, migration patterns, or conservation areas to gain insights into ecological dynamics and support biodiversity conservation efforts.\n\nFurthermore, it’s important to note that the functionality of this explorer is not restricted to geographic maps alone. It has the flexibility to incorporate a combination of charts and maps, offering a more diverse and comprehensive data visualization experience.\n\nWe’d love to see your work showcased on \n\nHoloViz Discourse!","type":"content","url":"/notebooks/nasa-earthdata-gibs-explorer#summary","position":13},{"hierarchy":{"lvl1":"Web Feature Services"},"type":"lvl1","url":"/notebooks/web-feature-services","position":0},{"hierarchy":{"lvl1":"Web Feature Services"},"content":"Web Feature Services (WFS) provide access to geospatial data in a more interactive and granular manner compared to Web Map Services (WMS). Instead of pre-rendered image tiles, WFS allows users to retrieve and manipulate individual features or objects on a map.","type":"content","url":"/notebooks/web-feature-services","position":1},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Feature Retrieval"},"type":"lvl2","url":"/notebooks/web-feature-services#feature-retrieval","position":2},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Feature Retrieval"},"content":"With WFS, users can query and retrieve specific features based on their spatial and attribute properties. The service provides a standardized interface for accessing and interacting with geospatial data, making it easier to integrate and analyze the information in various applications.","type":"content","url":"/notebooks/web-feature-services#feature-retrieval","position":3},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Feature Specifications"},"type":"lvl2","url":"/notebooks/web-feature-services#feature-specifications","position":4},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Feature Specifications"},"content":"Just like WMS, WFS also follows specific specifications that define its functionality and usage. The main specification for WFS is the OGC WFS standard (Open Geospatial Consortium Web Feature Service), which outlines the operations and formats supported by the service.\n\nThe URL pattern for accessing WFS data typically includes parameters for specifying the requested feature type, output format, and any additional query parameters. Here’s an example URL pattern:http://example.com/wfs?service=WFS&version=1.1.0&request=GetFeature&typeName=layer_name&outputFormat=geojson\n\nIn this example, the URL includes parameters such as service (specifying the WFS service), version (specifying the WFS version), request (specifying the type of request, such as GetFeature), typeName (specifying the name of the layer or feature type to retrieve), and outputFormat (specifying the desired format of the returned data, such as GeoJSON).","type":"content","url":"/notebooks/web-feature-services#feature-specifications","position":5},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Online WFS Viewers"},"type":"lvl2","url":"/notebooks/web-feature-services#online-wfs-viewers","position":6},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Online WFS Viewers"},"content":"Online WFS viewers provide a user-friendly interface for accessing and interacting with geospatial data through web feature services.\n\nHere are some examples of online WFS viewers:\n\nNOAA Weather Viewer (\n\nhttps://​viewer​.weather​.noaa​.gov/): This viewer, provided by the National Oceanic and Atmospheric Administration (NOAA), allows users to access and visualize real-time weather information through web feature services. Users can query and retrieve specific weather features, such as radar data, forecasts, and satellite imagery, and overlay them with their own data for comprehensive weather analysis.\n\nNational Map Viewer (\n\nhttps://​apps​.nationalmap​.gov​/viewer/): The National Map Viewer, developed by the United States Geological Survey (USGS), offers access to a wide range of geospatial data through web feature services. Users can retrieve and overlay various datasets, including topographic maps, aerial imagery, and elevation data, to explore and analyze different geographic features in combination with their own data.\n\nWhile existing online WFS viewers provide access to diverse geospatial data, the true power of web feature services (WFS) lies in the ability to overlay them with your own data. This capability empowers users to integrate and analyze geospatial information from multiple sources, facilitating advanced spatial analysis, decision-making, and data-driven insights.\n\nWe will explore how to utilize this functionality further in the following sections.","type":"content","url":"/notebooks/web-feature-services#online-wfs-viewers","position":7},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/web-feature-services#prerequisites","position":8},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Prerequisites"},"content":"The following packages are good to know, but not required, as we will be walking through them below.\n\nConcepts\n\nImportance\n\nNotes\n\nIntro to hvPlot\n\nHelpful\n\nHigh-level plotting\n\nIntro to GeoViews\n\nHelpful\n\nGeographic visualizations\n\nIntro to Geopandas\n\nHelpful\n\nGIS files\n\nIntro to Panel\n\nHelpful\n\nDashboard creations\n\nIntro to Requests\n\nHelpful\n\nWebpage requests\n\nIntro to Cartopy\n\nHelpful\n\nMap projections\n\nIntro to OWSLib\n\nHelpful\n\nWFS URLs\n\nTime to learn: 10 minutes\n\n","type":"content","url":"/notebooks/web-feature-services#prerequisites","position":9},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/web-feature-services#imports","position":10},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Imports"},"content":"Let’s start by importing a few packages:\n\nGeoViews is a Python library that simplifies working with geographic data and enables the integration of geographical features to your maps.\n\nHvplot is a plotting library built on top of GeoViews. It provides a concise and intuitive API for generating interactive plots and charts from geospatial data.\n\nCartoPy is a Python library specifically designed for map projections and geospatial data visualization. It offers a wide range of tools and functionalities to work with geospatial datasets, making it easier to generate maps with different projections.\n\nPanel is a powerful Python library that allows you to create interactive dashboards and applications. It provides flexible tools for building custom user interfaces with interactive controls, widgets, and layout components, enhancing the interactivity of your visualizations and data analysis workflows.\n\nRequests is a popular Python library for making HTTP requests. It simplifies sending HTTP requests to web servers and handling the responses. In the context of geospatial data visualization, requests can be used to retrieve data from web services, such as WMS (Web Map Service) endpoints, to integrate external data sources into your visualizations.\n\nGeopandas is a Python library used for working with geospatial data. With Geopandas, you can easily load shapefiles into a GeoDataFrame, which is a tabular data structure that combines the spatial information of the shapefile with its attribute data. This allows you to perform various geospatial operations and analyses on the data.\n\nOWSLib is a Python library designed for client-side programming using the interface standards of the Open Geospatial Consortium (OGC) web services and their associated content models. Specifically, in this scenario, OWSLib will be utilized solely for the purpose of constructing URLs for WFS.\n\nTo enable the Bokeh plotting backend for GeoViews, we use the line gv.extension(\"bokeh\"). GeoViews supports multiple plotting backends, including Bokeh and Matplotlib, giving you the flexibility to choose the one that suits your requirements best.\n\nLastly, pn.extension() initializes the Panel library and sets up the necessary environment for creating interactive panels and dashboards. You can also specify configurations such as sizing_mode=\"stretch_width\" within pn.extension().\n\nimport geoviews as gv\nimport hvplot.pandas\nimport cartopy.crs as ccrs\nimport panel as pn\nimport requests\nimport shapely\nimport geopandas as gpd\nfrom owslib.wfs import WebFeatureService\n\ngv.extension(\"bokeh\")\npn.extension()\n\n","type":"content","url":"/notebooks/web-feature-services#imports","position":11},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Accessing WFS Features"},"type":"lvl2","url":"/notebooks/web-feature-services#accessing-wfs-features","position":12},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Accessing WFS Features"},"content":"Unlike WMS, where built-in sources exist, accessing WFS requires utilizing external sources. However, similar to WMS, there are several external sources available for WFS, such as NOAA, which can be easily accessed. Depending on the specific source, accessing WFS data may also be free of charge.\n\nFor instance, if you prefer to obtain the CPC 6-10 day outlook as a GeoJSON instead of a tile image, you can utilize the gpd.read_file function, providing the relevant URL, or building it with OWSLib.\n\ndef get_wfs_feature(base_resource_url):\n    wfs = WebFeatureService(base_resource_url, version=\"2.0.0\")\n    wfs_contents = wfs.contents\n    wfs_layer = list(wfs_contents)[0]\n    feature = wfs.getfeature(\n        typename=[wfs_layer],\n        outputFormat=\"GeoJson\",\n    )\n    return feature\n\nbase_resource_url = \"https://mapservices.weather.noaa.gov/vector/services/outlooks/cpc_6_10_day_outlk/MapServer/WFSServer?service=WFS&version=1.0.0&request=GetFeature&srsname=EPSG%3A4326&typename=cpc_6_10_day_outlk%3ACPC_6-10_Day_Temperature_Outlook&propertyname=%2A\"\nfeature = get_wfs_feature(base_resource_url)\ngdf = gpd.read_file(feature)\ngdf[\"geometry\"] = gdf[\"geometry\"].map(lambda polygon: shapely.ops.transform(lambda x, y: (y, x), polygon))  # flip x and y\ngdf.head()\n\n","type":"content","url":"/notebooks/web-feature-services#accessing-wfs-features","position":13},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Visualizing WFS Data"},"type":"lvl2","url":"/notebooks/web-feature-services#visualizing-wfs-data","position":14},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Visualizing WFS Data"},"content":"Now that it’s serialized into a gpd.GeoDataFrame, visualizing the data is a trivial task with hvplot! Be sure to set geo=True to specify this is a geographic dataset.\n\ntemp_outlook = gdf.hvplot(geo=True).opts(global_extent=True) * gv.feature.coastline()\ntemp_outlook\n\nYou can also add tooltips and colors to show the category and probability upon hover!\n\ntemp_outlook = (\n    gdf.hvplot(\n        hover_cols=[\"cat\", \"prob\"],\n        tools=[\"hover\"],\n        cmap=[\"#ff6666\", \"#66b3ff\", \"#999999\"],\n        geo=True,\n    ).opts(global_extent=True)\n    * gv.feature.coastline()\n)\ntemp_outlook\n\n","type":"content","url":"/notebooks/web-feature-services#visualizing-wfs-data","position":15},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Overlaying Custom Data"},"type":"lvl2","url":"/notebooks/web-feature-services#overlaying-custom-data","position":16},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Overlaying Custom Data"},"content":"By overlaying WFS layers with your own data, you can gain insights into the outlook for specific locations.\n\nFor instance, on its own, the coordinates (40.1N, -88.26W) may not mean much, but by overlaying WFS features, you now know the temperature outlook for that location.\n\ncoord_point = gv.Points((-88.24, 40.1), crs=ccrs.PlateCarree()).opts(\n    color=\"yellow\", size=10, marker=\"x\"\n)\n\ntemp_outlook * coord_point\n\n","type":"content","url":"/notebooks/web-feature-services#overlaying-custom-data","position":17},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/web-feature-services#summary","position":18},{"hierarchy":{"lvl1":"Web Feature Services","lvl2":"Summary"},"content":"Web Feature Services (WFS) offer an interactive and granular way to access geospatial data.\n\nWith WFS, users can retrieve specific features based on their properties.\n\nIt follows the OGC WFS standard and allows for the integration of various datasets.\n\nOnline WFS viewers provide user-friendly interfaces for accessing and visualizing geospatial data.\n\nBy overlaying WFS layers with custom data, users can gain valuable insights and unlock the full potential of geospatial information.","type":"content","url":"/notebooks/web-feature-services#summary","position":19},{"hierarchy":{"lvl1":"Web Map Services"},"type":"lvl1","url":"/notebooks/web-map-services","position":0},{"hierarchy":{"lvl1":"Web Map Services"},"content":"\n\nImage from \n\nWeb Map Tile Services for Spatial Data Infrastructures: Management and Optimization\n\n","type":"content","url":"/notebooks/web-map-services","position":1},{"hierarchy":{"lvl1":"Web Map Services"},"type":"lvl1","url":"/notebooks/web-map-services#web-map-services","position":2},{"hierarchy":{"lvl1":"Web Map Services"},"content":"Web map services (WMS) provide small, pre-rendered image tiles that collectively form a larger map when displayed in a grid-like pattern. Each tile represents a specific geographic area and zoom level, allowing users to view maps at different scales and locations.","type":"content","url":"/notebooks/web-map-services#web-map-services","position":3},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Tile Specifications"},"type":"lvl2","url":"/notebooks/web-map-services#tile-specifications","position":4},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Tile Specifications"},"content":"Various specifications govern the functionality of web map services, including TMS (Tile Map Service), WMTS (Web Map Tile Service), and XYZ. These specifications define how the tiles are organized, accessed, and displayed within a web mapping context.\n\nHowever, it is not necessary to delve into the technical details of these underlying specifications in order to benefit from web map services. The implementation takes care of these intricacies behind the scenes, allowing users to seamlessly utilize the service without requiring in-depth knowledge.\n\nNonetheless, it is useful to have an understanding of the format that each specification follows. Here are examples of URL patterns associated with each specification:\n\nTMS (Tile Map Service): \n\nhttp://​example​.com​/tiles​/{z}​/{x}​/{y}​.png\nWMTS (Web Map Tile Service): \n\nhttp://​example​.com​/wmts​/{Layer}​/{TileMatrixSet}​/{TileMatrix}​/{TileRow}​/{TileCol}​.png\nXYZ: \n\nhttp://​example​.com​/{z}​/{x}​/{y}​.png\n\nThese URLs represent the structure for accessing individual map tiles based on their zoom level (z), column (x), and row (y) coordinates, and sometimes, as you’ll see later, it’s based on the bounds {XMIN},{XMAX},{YMIN},{YMAX}. Other specifications exist as well, such as Quadkey used by Bing Maps and GeoPackage for storing tiles in a single file.","type":"content","url":"/notebooks/web-map-services#tile-specifications","position":5},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Online WMS Viewers"},"type":"lvl2","url":"/notebooks/web-map-services#online-wms-viewers","position":6},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Online WMS Viewers"},"content":"Online WMS viewers provide a user-friendly interface for accessing and visualizing geospatial data through web map services. They offer a convenient way to explore and interact with various layers of information, ranging from weather data to satellite imagery.\n\nHere are some examples of online WMS viewers:\n\nNOAA Weather Viewer (\n\nhttps://​viewer​.weather​.noaa​.gov/): This viewer, provided by the National Oceanic and Atmospheric Administration (NOAA), allows users to access and visualize real-time weather information, including radar data, forecasts, and satellite imagery. It offers an intuitive interface for exploring weather conditions and monitoring meteorological phenomena.\n\nNational Map Viewer (\n\nhttps://​apps​.nationalmap​.gov​/viewer/): The National Map Viewer, developed by the United States Geological Survey (USGS), provides access to a wide range of geospatial data, including topographic maps, aerial imagery, and elevation data. Users can explore and overlay different datasets, enabling them to analyze and visualize various geographic features.\n\nNASA Worldview (\n\nhttps://​worldview​.earthdata​.nasa​.gov/): NASA Worldview is a powerful online WMS viewer that offers access to a vast collection of satellite imagery and Earth observation data. Users can view imagery captured by different satellite missions and explore global environmental changes over time. The viewer supports advanced visualization and analysis tools, allowing users to study phenomena such as atmospheric conditions, land cover changes, and natural disasters.\n\nWhile there are existing online WMS viewers that provide access to a wide range of geospatial data, the true power of web map services (WMS) lies in the ability to overlay them with your own data.\n\nWe will explore how to do this below.","type":"content","url":"/notebooks/web-map-services#online-wms-viewers","position":7},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Prerequisites"},"type":"lvl2","url":"/notebooks/web-map-services#prerequisites","position":8},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Prerequisites"},"content":"The following packages are good to know, but not required, as we will be walking through them below.\n\nConcepts\n\nImportance\n\nNotes\n\nIntro to GeoViews\n\nHelpful\n\nGeographic visualizations\n\nIntro to Panel\n\nHelpful\n\nDashboard creations\n\nIntro to Requests\n\nHelpful\n\nWebpage requests\n\nIntro to Cartopy\n\nHelpful\n\nMap projections\n\nIntro to OWSLib\n\nHelpful\n\nWMS URLs\n\nTime to learn: 15 minutes\n\n","type":"content","url":"/notebooks/web-map-services#prerequisites","position":9},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Imports"},"type":"lvl2","url":"/notebooks/web-map-services#imports","position":10},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Imports"},"content":"Let’s first import a few packages.\n\nGeoViews is a Python library that facilitates the integration of WMS and other geospatial data sources with your own datasets. It provides a high-level interface for working with geographic data and simplifies the process of creating interactive visualizations.\n\nCartoPy is a Python library that specializes in handling map projections and geospatial data visualization. It provides a wide range of tools and functionalities to work with geospatial datasets, making it easier to create maps with different projections.\n\nPanel is a Python library that offers a set of flexible and powerful tools for creating interactive dashboards and apps. It allows you to build custom user interfaces with interactive controls, widgets, and layout components, enabling rich interactivity for your visualizations and data analysis workflows.\n\nRequests is a popular Python library for making HTTP requests. It simplifies sending HTTP requests to web servers and handling the responses. In the context of geospatial data visualization, requests can be used to retrieve data from web services, such as WMS endpoints, to integrate external data sources into your visualizations.\n\nOWSLib is a Python library designed for client-side programming using the interface standards of the Open Geospatial Consortium (OGC) web services and their associated content models. Specifically, in this scenario, OWSLib will be utilized solely for the purpose of constructing URLs for WMS.\n\nThe next line, gv.extension(\"bokeh\"), enables the Bokeh (interactive) plotting backend for GeoViews. GeoViews supports multiple plotting backends, such as Bokeh and Matplotlib, which allow you to choose the one that best suits your needs.\n\nFinally, pn.extension() initializes the panel library and sets up the necessary environment for creating interactive panels and dashboards. You may specify configurations like sizing_mode=\"stretch_width\" within pn.extension().\n\nimport geoviews as gv\nimport cartopy.crs as ccrs\nimport panel as pn\nimport requests\nfrom owslib.wms import WebMapService\n\ngv.extension(\"bokeh\")\npn.extension()\n\n","type":"content","url":"/notebooks/web-map-services#imports","position":11},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Using Built-in Sources"},"type":"lvl2","url":"/notebooks/web-map-services#using-built-in-sources","position":12},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Using Built-in Sources"},"content":"Here’s how to use GeoViews to access built-in WMS tile sources effortlessly.\n\nBy activating the “pan” and “wheel_zoom” tools, users gain interactive control over the map. They can easily navigate the map by dragging, exploring different areas, and experiencing a sense of flexibility and control.\n\nTo experience the capabilities of WMS and GeoViews, try zooming in on the map. As you zoom in, you will notice that more details and finer features become visible, providing a richer and more detailed representation of the geographic data.\n\nTo see all available built-in tile sources, please visit the \n\nGeoViews documentation.\n\nbasemap = gv.tile_sources.OSM().opts(active_tools=[\"pan\", \"wheel_zoom\"])\nbasemap\n\n","type":"content","url":"/notebooks/web-map-services#using-built-in-sources","position":13},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Overlaying Custom Data"},"type":"lvl2","url":"/notebooks/web-map-services#overlaying-custom-data","position":14},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Overlaying Custom Data"},"content":"By integrating WMS layers with your own data, you can unlock the potential of geospatial information and create maps that communicate intricate spatial relationships, highlight patterns and trends, and offer valuable insights.\n\nLet’s illustrate this with an example. In isolation, the coordinates (40.1N, -88.26W) may not hold much significance. However, when overlaying the WMS tiles and zooming in, you might discover that these coordinates correspond to the location of the University of Illinois at Urbana-Champaign, the author’s alma mater. This simple overlay demonstrates how WMS layers can provide context and meaningful information to otherwise isolated data points.\n\nNote that crs and projection were specified.\n\nThe crs=ccrs.PlateCarree() argument specifies that the data coordinates are from the Plate Carree coordinate reference system, which is commonly used for latitude and longitude values.\n\nOn the other hand, the projection parameter determines what the data should be transformed to before being displayed.\n\nAt the time of writing, GeoViews only supports overlaying data with tile sources when the map’s projection is set to ccrs.GOOGLE_MERCATOR.\n\nLastly, the global_extent=True option ensures that the map displays the entire world.\n\ncoord_point = gv.Points((-88.24, 40.1), crs=ccrs.PlateCarree()).opts(projection=ccrs.GOOGLE_MERCATOR, global_extent=True)\n\nbasemap * coord_point\n\n","type":"content","url":"/notebooks/web-map-services#overlaying-custom-data","position":15},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Accessing External Sources"},"type":"lvl2","url":"/notebooks/web-map-services#accessing-external-sources","position":16},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Accessing External Sources"},"content":"Although the availability of built-in sources is convenient, it may not always be sufficient for all use cases. However, the good news is that there are numerous external sources available, such as NOAA, which can be easily accessed, and depending on the source, free of charge!\n\nFor example, if you want to access radar base reflectivity provided by NOAA, you can create a gv.WMTS element with the appropriate URL and parameters specific to the external tile service.\n\nradar_url_template = \"\"\"\nhttps://mapservices.weather.noaa.gov:443/eventdriven/services/\nradar/radar_base_reflectivity_time/ImageServer/WMSServer?\nservice=WMS&version=1.1.1&request=GetMap&\nlayers=0&\nstyles=default&\nwidth=256&height=256&\nsrs=EPSG%3A3857&\nbbox={XMIN}%2C{YMIN}%2C{XMAX}%2C{YMAX}&\nformat=image%2Fpng&transparent=TRUE&\nexceptions=application%2Fvnd.ogc.se_xml&bgcolor=0xFFFFFF\n\"\"\"\n\nradar_imagery = gv.WMTS(radar_url_template, crs=ccrs.GOOGLE_MERCATOR).opts(projection=ccrs.GOOGLE_MERCATOR, global_extent=True)\n\nbasemap * radar_imagery\n\n","type":"content","url":"/notebooks/web-map-services#accessing-external-sources","position":17},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Understanding the URL Template"},"type":"lvl2","url":"/notebooks/web-map-services#understanding-the-url-template","position":18},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Understanding the URL Template"},"content":"The provided URL template is used to construct a request for a specific map image using WMS protocol.\n\nLet’s break down the components of the URL to understand its functionality:\n\nhttps://mapservices.weather.noaa.gov:443/eventdriven/services/\nThis is the base URL for the NOAA weather map services. It specifies the server address and port.\n\nradar/radar_base_reflectivity_time/ImageServer/WMSServer?\nThis part of the URL specifies the specific service and resource being accessed. In this case, it indicates the radar_base_reflectivity_time image service within the radar category.\n\nservice=WMS&version=1.1.1&request=GetMap\nThese parameters define the service type (WMS) and the version of the WMS protocol being used (1.1.1). It also specifies that the request is to retrieve a map image (GetMap).\n\nlayers=0\nThis parameter indicates the layer or layers from which the map image should be retrieved. In this case, it specifies layer 0.\n\nstyles=default\nThis parameter specifies the style to be applied to the map image. Here, it is set to the default style.\n\nwidth=256&height=256\nThese parameters define the width and height (in pixels) of the requested map image.\n\nsrs=EPSG%3A3857\nThis parameter specifies the spatial reference system (SRS) for the map image. In this case, it uses the EPSG:3857 coordinate reference system.\n\nbbox={XMIN}%2C{YMIN}%2C{XMAX}%2C{YMAX}\nThis parameter specifies the bounding box for the requested map image. The values {XMIN}, {YMIN}, {XMAX}, and {YMAX} will be replaced with actual coordinate values. The values provided within the curly braces are percent-encoded.\n\nformat=image%2Fpng&transparent=TRUE\nThese parameters define the desired image format (PNG) and specify that the image should have a transparent background.\n\nexceptions=application%2Fvnd.ogc.se_xml&bgcolor=0xFFFFFF\nThese parameters define how exceptions should be reported (in XML format) and set the background color for the map image to white (#FFFFFF).\n\nYou might also be wondering what those percent-encoded characters, like %2C, mean.\n\nPercent-encoding is a mechanism used to represent special and reserved characters in URLs by replacing them with a “%” symbol followed by their hexadecimal representation. It ensures safe transmission and proper interpretation of URLs containing characters with special meanings or non-ASCII characters.\n\nTo de-mystify the template URL a step further, we can simply use requests.utils.unquote and see:\n\n%3A: Represents the colon character (:)\n\n%2C: Represents the comma character (,)\n\n%2F: Represents the forward slash character (/)\n\n%20: Represents the space character\n\nrequests.utils.unquote(radar_url_template).strip()\n\n","type":"content","url":"/notebooks/web-map-services#understanding-the-url-template","position":19},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Deriving the URL Template"},"type":"lvl2","url":"/notebooks/web-map-services#deriving-the-url-template","position":20},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Deriving the URL Template"},"content":"Once you have understood the individual components of the URL template, you may wonder if you have to manually assemble them yourself. Fortunately, you can use OWSLib to programmatically construct the complete URL template.\n\nTo start, you need to locate the base URL and the specific resource manually by accessing the desired service and resource in your browser.\n\nOpen \n\nweather.gov CloudGISWebServices\n\nIn the table, click \n\nBase Reflectivity Radar\n\nOn the top left, click \n\nWMS\n\nCopy and paste the browser URL into get_wms_url below.\n\nRun this cell and the working URL should be generated.\n\nNote, some base_resource_urls feature multiple layers. Here, only the first layer is returned.\n\n# Global extent in EPSG:3857 (Google Mercator)\nXMIN = -20037507.539400\nYMIN = 1638517.444800\nXMAX = 20037260.918700\nYMAX = 7714669.394600\n\n\ndef get_wms_url(base_resource_url):\n    wms = WebMapService(base_resource_url)\n    wms_contents = wms.contents\n    wms_layer = list(wms_contents)[0]\n    wms_styles = list(wms[wms_layer].styles)\n    wms_url = wms.getmap(\n        layers=[wms_layer],\n        styles=wms_styles,\n        srs=\"EPSG:3857\",\n        bbox=(XMIN, YMIN, XMAX, YMAX),\n        size=(256, 256),\n        format=\"image/png\",\n        transparent=True,\n    ).geturl()\n    return wms_url\n\n\nradar_url = get_wms_url(\n    \"https://mapservices.weather.noaa.gov/eventdriven/services/radar/radar_base_reflectivity_time/ImageServer/WMSServer?request=GetCapabilities&service=WMS\"\n)\nradar_url\n\nIf you click on this URL, you should a tile like below!\n\npn.pane.Image(requests.get(radar_url).content, styles={\"background\": \"white\"})\n\nHowever, we’re not done yet! If we simply pass this URL to gv.WMTS it will result in the following error:ValueError: Tile source URL format not recognized. Must contain {X}/{Y}/{Z}, {XMIN}/{XMAX}/{YMIN}/{YMAX} or {Q} template strings.\n\nTherefore, we must replace the bounding box values with these template strings.\n\ndef formulate_url_template(url):\n    return (\n        url\n        .replace(str(XMIN), \"{XMIN}\")\n        .replace(str(YMIN), \"{YMIN}\")\n        .replace(str(XMAX), \"{XMAX}\")\n        .replace(str(YMAX), \"{YMAX}\")\n    )\n\nradar_url_template = formulate_url_template(radar_url)\n\nradar_url_template\n\nNow, we can pass the URL template to gv.WMTS and get the same result as before.\n\ngv.WMTS(radar_url_template)\n\n","type":"content","url":"/notebooks/web-map-services#deriving-the-url-template","position":21},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Troubleshooting URLs"},"type":"lvl2","url":"/notebooks/web-map-services#troubleshooting-urls","position":22},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Troubleshooting URLs"},"content":"If you encounter a blank page as a result, try formatting the URL template using the global XMIN, YMIN, XMAX, YMAX values in Mercator coordinates.\n\nIf it returns a white canvas, it probably means that there aren’t any issues--there’s simply no ongoing event, e.g. no precipitation for the radar to pick up on.\n\nIf you receive a detailed error message, that’s good news--you can make the necessary revisions.\n\nIt is crucial to emphasize once more that at the time of writing, gv.WMTS only works with the ccrs.GOOGLE_MERCATOR coordinate reference system/projection!\n\n","type":"content","url":"/notebooks/web-map-services#troubleshooting-urls","position":23},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Getting Legends"},"type":"lvl2","url":"/notebooks/web-map-services#getting-legends","position":24},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Getting Legends"},"content":"A map loses its usefulness without a legend, unless the colors or symbols used are widely recognized.\n\nAs an example, let’s retrieve the legend for the CPC 6-10 Days Outlook map and modify the get_wms_url function above!\n\nWe can, once again depend on OWSLib to retrieve the legend!\n\ndef get_wms_urls(base_resource_url):\n    wms = WebMapService(base_resource_url)\n    wms_contents = wms.contents\n    wms_layer = list(wms_contents)[0]\n    wms_styles = list(wms[wms_layer].styles)\n    wms_url = wms.getmap(\n        layers=[wms_layer],\n        styles=wms_styles,\n        srs=\"EPSG:3857\",\n        bbox=(XMIN, YMIN, XMAX, YMAX),\n        size=(256, 256),\n        format=\"image/png\",\n        transparent=True,\n    ).geturl()\n    legend_url = wms_contents[wms_layer].styles[wms_styles[0]][\"legend\"]\n    return {\"wms\": wms_url, \"legend\": legend_url, \"title\": wms_contents[wms_layer].title}\n\n\ncpc_outlook_wms_urls = get_wms_urls(\n    \"https://mapservices.weather.noaa.gov/vector/services/outlooks/cpc_6_10_day_outlk/MapServer/WMSServer?request=GetCapabilities&service=WMS\"\n)\ncpc_outlook_wms_url_template = formulate_url_template(cpc_outlook_wms_urls[\"wms\"])\ncpc_outlook_legend_url = cpc_outlook_wms_urls[\"legend\"]\ncpc_outlook_title = cpc_outlook_wms_urls[\"title\"]\n\ncpc_outlook_imagery = gv.WMTS(cpc_outlook_wms_url_template).opts(global_extent=True, title=cpc_outlook_title)\ncpc_outlook_legend_image = pn.pane.Image(requests.get(cpc_outlook_legend_url).content)\n\npn.Row(\n    basemap * cpc_outlook_imagery,\n    cpc_outlook_legend_image,\n)\n\n","type":"content","url":"/notebooks/web-map-services#getting-legends","position":25},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Summary"},"type":"lvl2","url":"/notebooks/web-map-services#summary","position":26},{"hierarchy":{"lvl1":"Web Map Services","lvl2":"Summary"},"content":"Web map services (WMS) provide pre-rendered map tiles for displaying geospatial data.\n\nThey can be accessed through URLs based on specifications like TMS, WMTS, and XYZ. Online WMS viewers offer user-friendly interfaces for exploring geospatial data.\n\nHowever, the true power of WMS lies in overlaying them with your own data. Packages like GeoViews, Panel, Requests, and Cartopy facilitate this integration.\n\nFor more examples of how to use WMS, check out the example workflows or refer to the documentation for \n\nOWSLib.\n\nNext, we will explore how to use web feature services.","type":"content","url":"/notebooks/web-map-services#summary","position":27}]}